package com.crossover.techtrial.service;

import com.crossover.techtrial.dto.DailyElectricity;
import com.crossover.techtrial.model.HourlyElectricity;
import com.crossover.techtrial.repository.HourlyElectricityRepository;
import com.crossover.techtrial.repository.PanelRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import javax.persistence.EntityManager;
import javax.persistence.Query;
import java.util.List;

/**
 * HourlyElectricityServiceImpl will handle electricity generated by a Panel.
 *
 * @author Crossover
 *
 */

@Service
public class HourlyElectricityServiceImpl implements HourlyElectricityService {
  @Autowired
  HourlyElectricityRepository hourlyElectricityRepository;

  @Autowired
  PanelRepository panelRepository;

  @Autowired
  EntityManager entityManager;
  
  public HourlyElectricity save(HourlyElectricity hourlyElectricity) {
    return hourlyElectricityRepository.save(hourlyElectricity);
  }
  
  public Page<HourlyElectricity> getAllHourlyElectricityByPanelId(Long panelId, Pageable pageable) {
    return hourlyElectricityRepository.findAllByPanelIdOrderByReadingAtDesc(panelId, pageable);
  }

  @Override
  public List<DailyElectricity> getDailystatistics(Long panelId) {
    Query query = entityManager.createNativeQuery("Select cast(reading_at as date) date, sum(generated_electricity) as sum , max(generated_electricity) as max, min(generated_electricity) as min , avg(generated_electricity) as average "
            + "FROM crosssolar.hourly_electricity "
            + "WHERE reading_at < cast((curdate()-1) as date) and panel_id = ? "
            + "GROUP BY CAST(reading_at AS DATE)");
    query.setParameter(1, panelId);

    return query.getResultList();
  }

}